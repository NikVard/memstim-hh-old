Using "./configs/par7.json"
seed_val        : 42
noise           : {'py': {'sigma': 0.0}, 'inh': {'sigma': 0.0}}
areas           : {'EC': {'E': {'N': 10000, 'type': 'PyCAN'}, 'I': {'N': 1000, 'type': 'Inh'}}, 'DG': {'E': {'N': 10000, 'type': 'Py'}, 'I': {'N': 100, 'type': 'Inh'}}, 'CA3': {'E': {'N': 1000, 'type': 'PyCAN'}, 'I': {'N': 100, 'type': 'Inh'}}, 'CA1': {'E': {'N': 10000, 'type': 'PyCAN'}, 'I': {'N': 1000, 'type': 'Inh'}}}
Kuramoto        : {'N': 50, 'f0': 4.0, 'sigma': 0.5, 'kN': 10, 'gain': 0.001, 'offset': -0.39269908169872414}
connectivity    : {'intra': {'EC': [[0.0, 0.37], [0.54, 0.0]], 'DG': [[0.0, 0.06], [0.14, 0.0]], 'CA3': [[0.56, 0.75], [0.75, 0.0]], 'CA1': [[0.0, 0.28], [0.3, 0.7]]}, 'inter': {'p_tri': 0.45, 'p_mono': 0.2}}
synapses        : {'gmax_e': 600.0, 'gmax_i': 60.0}
stimulation     : {'I_stim': 0, 't_stim': 1000, 'dt_stim': 1}
simulation      : {'debugging': False, 'duration': 2000.0}
git_short_hash  : 86de16a
timestamp       : Wed Dec  1 13:53:01 2021
git_branch      : master
git_hash        : 86de16a3c8670bb93ab6b344d586a4e43019a9bc


 >  Making the neuron groups...
EC: done
DG: done
CA3: done
CA1: done
Intra-region distances:
EC_pyCAN   pdist: (2.383545721188217e-05 , 0.01603280254158906 )
	x ---> (0.0019741609705912705       , 0.007022231496628046        )
	y ---> (-0.008989812360837164       , -0.004036607010508367       )
	z ---> (1.7452133049314775e-07      , 0.014995765099291958        )

EC_inh     pdist: (4.372791734521832e-05 , 0.01556223228999933 )
	x ---> (0.002000332205444998        , 0.006163356027181769        )
	y ---> (-0.008290898197275447       , -0.004706281137010571       )
	z ---> (1.4145637912356e-05         , 0.014995098078631384        )

DG_py      pdist: (1.4408313697134033e-05 , 0.015317859370343934)
	x ---> (0.0031999055058961274       , 0.006525784972628232        )
	y ---> (-0.0029347233077570895      , -0.001250995668870334       )
	z ---> (2.3661686708511914e-06      , 0.014998872402497648        )

DG_inh     pdist: (0.00011612399695356045 , 0.014902500044764155)
	x ---> (0.0030918260865736027       , 0.006682315074898889        )
	y ---> (-0.0031251390260583307      , -0.0012153335328641268      )
	z ---> (0.00014990662287856193      , 0.014998514655138474        )

CA3_pyCAN  pdist: (2.666088068422803e-05 , 0.014996363158734188)
	x ---> (0.004011130179000218        , 0.005303768871226376        )
	y ---> (-0.0017434536964510319      , -0.00021701592543779062     )
	z ---> (7.218584146763402e-07       , 0.01499484463434508         )

CA3_inh    pdist: (0.0001110781010262293 , 0.014740681806888895)
	x ---> (0.004163254731967279        , 0.0054601376095424654       )
	y ---> (-0.001730882566784673       , -8.729121393804233e-05      )
	z ---> (0.00022759476257752168      , 0.01496073740738054         )

CA1_pyCAN  pdist: (2.1394752980832646e-05 , 0.015486822175086207)
	x ---> (0.00038513660521158664      , 0.003744423492901244        )
	y ---> (-0.00435333339272019        , -0.00022741646169606246     )
	z ---> (1.0124646986167676e-06      , 0.014995981264435085        )

CA1_inh    pdist: (4.324739891339278e-05 , 0.015470416911445859)
	x ---> (2.0770019543201133e-05      , 0.003734280400965574        )
	y ---> (-0.004576052457447356       , -1.836199514864865e-05      )
	z ---> (1.221925963132346e-05       , 0.014979143851695007        )


 >  Making the synapses...
     * intra-region
EC-to-EC: done
DG-to-DG: done
CA3-to-CA3: done
CA1-to-CA1: done
     * inter-region
EC-to-all: done
DG-to-CA3: done
CA3-to-CA1: done
CA1-to-EC: done

 >  Monitors...
State monitors [v]: done
Spike monitors: done
Rate monitors: done

 >  Inputs and Stimulation...

 >  Kuramoto Oscillators...
Group: done
Synapses: done
Order parameter group: done

 >  Spikes-to-Rates Filter...
Group: done

 >  Connections...
CA1-to-S2R: done
Linking S2R to Kuramoto oscillators: done

 >  Kuramoto and Filter Monitors...
State monitor [Theta]: done
State monitor [drive]: done

 >  Connecting the network...
Network connections: done

 >  Starting simulation...
WARNING    The expression "29 / 10" divides two integer values. In previous versions of Brian, this would have used either an integer ("flooring") or a floating point division, depending on the Python version and the code generation target. In the current version, it always uses a floating point division. Explicitly ask for an  integer division ("//"), or turn one of the operands into a floating point value (e.g. replace "1/2" by "1.0/2") to no longer receive this warning. [brian2.parsing.bast.floating_point_division]
WARNING    The expression "29 / 5" divides two integer values. In previous versions of Brian, this would have used either an integer ("flooring") or a floating point division, depending on the Python version and the code generation target. In the current version, it always uses a floating point division. Explicitly ask for an  integer division ("//"), or turn one of the operands into a floating point value (e.g. replace "1/2" by "1.0/2") to no longer receive this warning. [brian2.parsing.bast.floating_point_division]
WARNING    The expression "(- 29) / 10" divides two integer values. In previous versions of Brian, this would have used either an integer ("flooring") or a floating point division, depending on the Python version and the code generation target. In the current version, it always uses a floating point division. Explicitly ask for an  integer division ("//"), or turn one of the operands into a floating point value (e.g. replace "1/2" by "1.0/2") to no longer receive this warning. [brian2.parsing.bast.floating_point_division]
WARNING    The expression "1 / 20" divides two integer values. In previous versions of Brian, this would have used either an integer ("flooring") or a floating point division, depending on the Python version and the code generation target. In the current version, it always uses a floating point division. Explicitly ask for an  integer division ("//"), or turn one of the operands into a floating point value (e.g. replace "1/2" by "1.0/2") to no longer receive this warning. [brian2.parsing.bast.floating_point_division]
WARNING    The expression "10 / 3" divides two integer values. In previous versions of Brian, this would have used either an integer ("flooring") or a floating point division, depending on the Python version and the code generation target. In the current version, it always uses a floating point division. Explicitly ask for an  integer division ("//"), or turn one of the operands into a floating point value (e.g. replace "1/2" by "1.0/2") to no longer receive this warning. [brian2.parsing.bast.floating_point_division]
WARNING    The expression "(- 7) / 2" divides two integer values. In previous versions of Brian, this would have used either an integer ("flooring") or a floating point division, depending on the Python version and the code generation target. In the current version, it always uses a floating point division. Explicitly ask for an  integer division ("//"), or turn one of the operands into a floating point value (e.g. replace "1/2" by "1.0/2") to no longer receive this warning. [brian2.parsing.bast.floating_point_division]
WARNING    The expression "(- 10) / 3" divides two integer values. In previous versions of Brian, this would have used either an integer ("flooring") or a floating point division, depending on the Python version and the code generation target. In the current version, it always uses a floating point division. Explicitly ask for an  integer division ("//"), or turn one of the operands into a floating point value (e.g. replace "1/2" by "1.0/2") to no longer receive this warning. [brian2.parsing.bast.floating_point_division]
WARNING    The expression "1 / 18" divides two integer values. In previous versions of Brian, this would have used either an integer ("flooring") or a floating point division, depending on the Python version and the code generation target. In the current version, it always uses a floating point division. Explicitly ask for an  integer division ("//"), or turn one of the operands into a floating point value (e.g. replace "1/2" by "1.0/2") to no longer receive this warning. [brian2.parsing.bast.floating_point_division]
WARNING    The expression "11 / 20" divides two integer values. In previous versions of Brian, this would have used either an integer ("flooring") or a floating point division, depending on the Python version and the code generation target. In the current version, it always uses a floating point division. Explicitly ask for an  integer division ("//"), or turn one of the operands into a floating point value (e.g. replace "1/2" by "1.0/2") to no longer receive this warning. [brian2.parsing.bast.floating_point_division]
WARNING    The expression "(- 11) / 20" divides two integer values. In previous versions of Brian, this would have used either an integer ("flooring") or a floating point division, depending on the Python version and the code generation target. In the current version, it always uses a floating point division. Explicitly ask for an  integer division ("//"), or turn one of the operands into a floating point value (e.g. replace "1/2" by "1.0/2") to no longer receive this warning. [brian2.parsing.bast.floating_point_division]
WARNING    The expression "1 / 80" divides two integer values. In previous versions of Brian, this would have used either an integer ("flooring") or a floating point division, depending on the Python version and the code generation target. In the current version, it always uses a floating point division. Explicitly ask for an  integer division ("//"), or turn one of the operands into a floating point value (e.g. replace "1/2" by "1.0/2") to no longer receive this warning. [brian2.parsing.bast.floating_point_division]
WARNING    The expression "(- 19) / 9" divides two integer values. In previous versions of Brian, this would have used either an integer ("flooring") or a floating point division, depending on the Python version and the code generation target. In the current version, it always uses a floating point division. Explicitly ask for an  integer division ("//"), or turn one of the operands into a floating point value (e.g. replace "1/2" by "1.0/2") to no longer receive this warning. [brian2.parsing.bast.floating_point_division]
WARNING    The expression "(- 13) / 50" divides two integer values. In previous versions of Brian, this would have used either an integer ("flooring") or a floating point division, depending on the Python version and the code generation target. In the current version, it always uses a floating point division. Explicitly ask for an  integer division ("//"), or turn one of the operands into a floating point value (e.g. replace "1/2" by "1.0/2") to no longer receive this warning. [brian2.parsing.bast.floating_point_division]
WARNING    The expression "(- 15) / 28" divides two integer values. In previous versions of Brian, this would have used either an integer ("flooring") or a floating point division, depending on the Python version and the code generation target. In the current version, it always uses a floating point division. Explicitly ask for an  integer division ("//"), or turn one of the operands into a floating point value (e.g. replace "1/2" by "1.0/2") to no longer receive this warning. [brian2.parsing.bast.floating_point_division]
WARNING    The expression "1 / 50" divides two integer values. In previous versions of Brian, this would have used either an integer ("flooring") or a floating point division, depending on the Python version and the code generation target. In the current version, it always uses a floating point division. Explicitly ask for an  integer division ("//"), or turn one of the operands into a floating point value (e.g. replace "1/2" by "1.0/2") to no longer receive this warning. [brian2.parsing.bast.floating_point_division]
WARNING    The expression "(- 21) / 2" divides two integer values. In previous versions of Brian, this would have used either an integer ("flooring") or a floating point division, depending on the Python version and the code generation target. In the current version, it always uses a floating point division. Explicitly ask for an  integer division ("//"), or turn one of the operands into a floating point value (e.g. replace "1/2" by "1.0/2") to no longer receive this warning. [brian2.parsing.bast.floating_point_division]
WARNING    The expression "(- 75) / 17" divides two integer values. In previous versions of Brian, this would have used either an integer ("flooring") or a floating point division, depending on the Python version and the code generation target. In the current version, it always uses a floating point division. Explicitly ask for an  integer division ("//"), or turn one of the operands into a floating point value (e.g. replace "1/2" by "1.0/2") to no longer receive this warning. [brian2.parsing.bast.floating_point_division]
WARNING    The expression "1 / 17" divides two integer values. In previous versions of Brian, this would have used either an integer ("flooring") or a floating point division, depending on the Python version and the code generation target. In the current version, it always uses a floating point division. Explicitly ask for an  integer division ("//"), or turn one of the operands into a floating point value (e.g. replace "1/2" by "1.0/2") to no longer receive this warning. [brian2.parsing.bast.floating_point_division]
WARNING    The expression "(- 9) / 8" divides two integer values. In previous versions of Brian, this would have used either an integer ("flooring") or a floating point division, depending on the Python version and the code generation target. In the current version, it always uses a floating point division. Explicitly ask for an  integer division ("//"), or turn one of the operands into a floating point value (e.g. replace "1/2" by "1.0/2") to no longer receive this warning. [brian2.parsing.bast.floating_point_division]
WARNING    The expression "1 / 40" divides two integer values. In previous versions of Brian, this would have used either an integer ("flooring") or a floating point division, depending on the Python version and the code generation target. In the current version, it always uses a floating point division. Explicitly ask for an  integer division ("//"), or turn one of the operands into a floating point value (e.g. replace "1/2" by "1.0/2") to no longer receive this warning. [brian2.parsing.bast.floating_point_division]
WARNING    The expression "7 / 4" divides two integer values. In previous versions of Brian, this would have used either an integer ("flooring") or a floating point division, depending on the Python version and the code generation target. In the current version, it always uses a floating point division. Explicitly ask for an  integer division ("//"), or turn one of the operands into a floating point value (e.g. replace "1/2" by "1.0/2") to no longer receive this warning. [brian2.parsing.bast.floating_point_division]
WARNING    The expression "(- 7) / 4" divides two integer values. In previous versions of Brian, this would have used either an integer ("flooring") or a floating point division, depending on the Python version and the code generation target. In the current version, it always uses a floating point division. Explicitly ask for an  integer division ("//"), or turn one of the operands into a floating point value (e.g. replace "1/2" by "1.0/2") to no longer receive this warning. [brian2.parsing.bast.floating_point_division]
WARNING    Came across an abstract code block that may not be well-defined: the outcome may depend on the order of execution. You can ignore this warning if you are sure that the order of operations does not matter. Abstract code: "ThetaPreInput_post = Theta_pre"
 [brian2.codegen.generators.base]
Starting simulation at t=0. s for a duration of 2. s
76.6 ms (3%) simulated in 10s, estimated 4m 11s remaining.
153.7 ms (7%) simulated in 20s, estimated 4m 0s remaining.
230.7 ms (11%) simulated in 30s, estimated 3m 50s remaining.
307.6 ms (15%) simulated in 40s, estimated 3m 40s remaining.
0.3857 s (19%) simulated in 50s, estimated 3m 29s remaining.
0.4612 s (23%) simulated in 1m 0s, estimated 3m 20s remaining.
0.5372 s (26%) simulated in 1m 10s, estimated 3m 11s remaining.
0.6126 s (30%) simulated in 1m 20s, estimated 3m 1s remaining.
0.6887 s (34%) simulated in 1m 30s, estimated 2m 51s remaining.
0.7658 s (38%) simulated in 1m 40s, estimated 2m 41s remaining.
0.8383 s (41%) simulated in 1m 50s, estimated 2m 33s remaining.
0.914 s (45%) simulated in 2m 0s, estimated 2m 23s remaining.
0.9872 s (49%) simulated in 2m 10s, estimated 2m 13s remaining.
1.0629 s (53%) simulated in 2m 20s, estimated 2m 4s remaining.
1.1385 s (56%) simulated in 2m 30s, estimated 1m 54s remaining.
1.2142 s (60%) simulated in 2m 40s, estimated 1m 44s remaining.
1.2943 s (64%) simulated in 2m 50s, estimated 1m 33s remaining.
1.3718 s (68%) simulated in 3m 0s, estimated 1m 22s remaining.
ERROR      Brian 2 encountered an unexpected error. If you think this is a bug in Brian 2, please report this issue either to the discourse forum at <http://brian.discourse.group/>, or to the issue tracker at <https://github.com/brian-team/brian2/issues>. Please include this file with debug information in your report: /tmp/brian_debug_35y14xbe.log  Additionally, you can also include a copy of the script that was run, available at: /tmp/brian_script_im4mj219.py You can also include a copy of the redirected std stream outputs, available at /tmp/brian_stdout_vbdt77ik.log and /tmp/brian_stderr_kl8ech6p.log Thanks! [brian2]
Traceback (most recent call last):
  File "/home/nikos/miniconda3/envs/brianenv2/lib/python3.9/site-packages/brian2/codegen/runtime/cython_rt/cython_rt.py", line 160, in run_block
    return compiled_code.main(self.namespace)
  File "_cython_magic_6e7fd00f93aa43d43ad309812d327cff.pyx", line 386, in _cython_magic_6e7fd00f93aa43d43ad309812d327cff.main
ZeroDivisionError: float division

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/home/nikos/Documents/projects/Python/memstim-hh/run_sim_dumb.py", line 599, in <module>
    net.run(settings.duration, report='text', report_period=10*second, profile=True)
  File "/home/nikos/miniconda3/envs/brianenv2/lib/python3.9/site-packages/brian2/core/base.py", line 278, in device_override_decorated_function
    return func(*args, **kwds)
  File "/home/nikos/miniconda3/envs/brianenv2/lib/python3.9/site-packages/brian2/units/fundamentalunits.py", line 2434, in new_f
    result = f(*args, **kwds)
  File "/home/nikos/miniconda3/envs/brianenv2/lib/python3.9/site-packages/brian2/core/network.py", line 1072, in run
    obj.run()
  File "/home/nikos/miniconda3/envs/brianenv2/lib/python3.9/site-packages/brian2/core/base.py", line 181, in run
    codeobj()
  File "/home/nikos/miniconda3/envs/brianenv2/lib/python3.9/site-packages/brian2/codegen/codeobject.py", line 107, in __call__
    return self.run()
  File "/home/nikos/miniconda3/envs/brianenv2/lib/python3.9/site-packages/brian2/codegen/codeobject.py", line 135, in run
    return self.run_block('run')
  File "/home/nikos/miniconda3/envs/brianenv2/lib/python3.9/site-packages/brian2/codegen/runtime/cython_rt/cython_rt.py", line 164, in run_block
    raise BrianObjectException(message, self.owner) from exc
brian2.core.base.BrianObjectException: Error encountered with object named "CA1_inh".
Object was created here (most recent call only, full details in debug log):
  File "/home/nikos/Documents/projects/Python/memstim-hh/run_sim_dumb.py", line 282, in <module>
    G_I = NeuronGroup(N=settings.N_CA1[1],

An exception occured during the execution of the run block of code object CA1_inh_stateupdater_codeobject.
 (See above for original error message and traceback.)
